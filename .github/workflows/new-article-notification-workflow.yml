name: New Article Notification Workflow

# This workflow can be triggered manually from the GitHub Actions tab
on:
  workflow_dispatch:
    # Required inputs for the article notification
    inputs:
      articleTitle:
        description: 'Article title'
        type: string
        required: true
      articleDescription:
        description: 'Article description (supports multiline)'
        type: string
        required: true
      articleExcerpt:
        description: 'Article excerpt/quote (supports multiline)'
        type: string
        required: true
      articleUrl:
        description: 'URL to the published article'
        type: string
        required: true
      publicationDate:
        description: 'Publication date (e.g., "June 12, 2023")'
        type: string
        required: true
      authorName:
        description: 'Author name (default: Jürgen Karir)'
        type: string
        required: false
        default: 'Jürgen Karir'
      coverImageUrl:
        description: 'URL to the article cover image'
        type: string
        required: false

jobs:
  send-email-notification:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Log workflow trigger
        run: |
          echo "Sending email notification for new article:"
          echo "Title: ${{ github.event.inputs.articleTitle }}"

      # Prepare variables and escape multiline inputs for JSON
      - name: Prepare variables
        id: vars
        run: |
          # Escape description and excerpt for JSON
          DESCRIPTION=$(echo '${{ github.event.inputs.articleDescription }}' | jq -Rs .)
          EXCERPT=$(echo '${{ github.event.inputs.articleExcerpt }}' | jq -Rs .)
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "excerpt=$EXCERPT" >> $GITHUB_OUTPUT

      # Prepare audience list - using production by default
      - name: Prepare audience list
        id: audience
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          AUDIENCE_ID: '68312168-2f2f-465a-b88e-6ecf2fb51107'
        run: |
          echo "Using production audience from Resend API"

          # Install curl and jq for API request and JSON parsing
          apt-get update && apt-get install -y curl jq

          # Fetch contacts from Resend audience API
          RESPONSE=$(curl -s -X GET "https://api.resend.com/audiences/${AUDIENCE_ID}/contacts" \
            -H "Authorization: Bearer ${RESEND_API_KEY}" \
            -H "Content-Type: application/json")

          # Check if the API call was successful
          if echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
            CONTACTS=$(echo "$RESPONSE" | jq -r '.data[].email' | tr '\n' ',' | sed 's/,$//')
            echo "recipients=$CONTACTS" >> $GITHUB_OUTPUT
          else
            echo "Error: Failed to fetch contacts from Resend API" >&2
            exit 1
          fi

      # Send email using Resend
      - name: Send email notification
        uses: resendlabs/action-emails@latest
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        with:
          from: 'Blog <blog@jurgenkarir.com>'
          to: ${{ steps.audience.outputs.recipients }}
          subject: 'New Article: ${{ github.event.inputs.articleTitle }}'
          react: './src/components/email-templates/NewArticleNotification.tsx'
          react-props: |
            {
              "articleTitle": "${{ github.event.inputs.articleTitle }}",
              "articleDescription": ${{ steps.vars.outputs.description }},
              "articleExcerpt": ${{ steps.vars.outputs.excerpt }},
              "articleUrl": "${{ github.event.inputs.articleUrl }}",
              "publicationDate": "${{ github.event.inputs.publicationDate }}",
              "authorName": "${{ github.event.inputs.authorName }}",
              "coverImageUrl": "${{ github.event.inputs.coverImageUrl }}"
            }

      - name: Log completion
        run: echo "Email notification sent successfully!"
